name: ✨ Feature Request
description: Suggest a new feature or enhancement
title: "[FEATURE] "
labels: ["type:feature", "status:ready"]
assignees: []

body:
  - type: markdown
    attributes:
      value: |
        Thanks for suggesting a new feature! Please provide detailed information below.

  - type: input
    id: feature-title
    attributes:
      label: Feature Title
      description: Clear, concise feature name
      placeholder: "Add rate limiting for API endpoints"
    validations:
      required: true

  - type: dropdown
    id: feature-type
    attributes:
      label: Feature Type
      description: What type of feature is this?
      options:
        - "🔌 API - New endpoints, GraphQL resolvers"
        - "🗄️ Database - New schemas, relationships, queries"
        - "🔐 Auth - Authentication, authorization features"
        - "⚡ Performance - Caching, optimization features"
        - "🔒 Security - Security enhancements, compliance"
        - "🏗️ Infrastructure - Deployment, monitoring, scaling"
        - "📊 Analytics - Logging, metrics, reporting"
        - "🌐 Integration - Third-party services, webhooks"
        - "📧 Messaging - Email, SMS, notifications"
        - "📁 File - Upload, processing, storage features"
        - "⚙️ Configuration - Settings, feature flags"
        - "🧪 Developer - Tools, debugging, development features"
      default: 0
    validations:
      required: true

  - type: dropdown
    id: priority
    attributes:
      label: Priority
      description: How important is this feature?
      options:
        - "🔥 Critical - Security/compliance requirement"
        - "⚡ High - Important for users/business"
        - "📊 Medium - Nice to have"
        - "📝 Low - Future enhancement"
      default: 2
    validations:
      required: true

  - type: textarea
    id: problem
    attributes:
      label: Problem Statement
      description: What problem does this solve?
      placeholder: "Our API endpoints are vulnerable to abuse and DDoS attacks. We need rate limiting to protect our services and ensure fair usage across all clients..."
    validations:
      required: true

  - type: textarea
    id: solution
    attributes:
      label: Proposed Solution
      description: How should this feature work?
      placeholder: |
        Implement rate limiting middleware that:
        1. Tracks requests per IP/API key
        2. Implements sliding window algorithm
        3. Returns 429 status when limit exceeded
        4. Provides different limits for different endpoint types
        5. Supports whitelist for trusted clients
        6. Includes rate limit headers in responses
    validations:
      required: true

  - type: dropdown
    id: effort
    attributes:
      label: Estimated Effort
      description: How complex is this feature?
      options:
        - "⏱️ Small - Less than 4 hours"
        - "📅 Medium - 1-2 days"
        - "📆 Large - 3-5 days"
        - "🗓️ Extra Large - 1-2 weeks"
        - "🏗️ Epic - Multiple sprints"
      default: 2
    validations:
      required: true

  - type: textarea
    id: acceptance-criteria
    attributes:
      label: Acceptance Criteria
      description: When is this feature complete?
      placeholder: |
        - [ ] Rate limiting middleware is implemented
        - [ ] Different limits for different endpoint types
        - [ ] Returns 429 status with proper error message
        - [ ] Includes rate limit headers (X-RateLimit-*)
        - [ ] Support for IP-based and API key-based limiting
        - [ ] Admin interface to configure limits
        - [ ] Whitelist functionality for trusted clients
        - [ ] Monitoring and alerts for rate limit violations
        - [ ] Documentation updated with rate limits
        - [ ] Unit and integration tests written
    validations:
      required: true

  - type: textarea
    id: technical-requirements
    attributes:
      label: Technical Requirements
      description: Technical specifications and constraints
      placeholder: |
        Database Changes:
        - New table for rate limit tracking
        - Redis for fast lookups (preferred)
        
        Performance Requirements:
        - < 5ms overhead per request
        - Support 1000+ requests/second
        
        Configuration:
        - Environment variables for limits
        - Hot-reload configuration changes
        
        Dependencies:
        - Redis (recommended) or in-memory storage
        - Rate limiting library (express-rate-limit, etc.)
    validations:
      required: false

  - type: textarea
    id: api-design
    attributes:
      label: API Design
      description: API endpoints, request/response formats
      placeholder: |
        New endpoints:
        - GET /admin/rate-limits - View current limits
        - PUT /admin/rate-limits - Update limits
        - GET /admin/rate-limits/violations - View violations
        
        Response headers:
        - X-RateLimit-Limit: 1000
        - X-RateLimit-Remaining: 999
        - X-RateLimit-Reset: 1640995200
        
        Error response (429):
        ```json
        {
          "error": "Rate limit exceeded",
          "retryAfter": 3600,
          "limit": 1000
        }
        ```
    validations:
      required: false

  - type: textarea
    id: alternatives
    attributes:
      label: Alternative Solutions
      description: Other ways to solve this problem
      placeholder: |
        1. Use cloud-based rate limiting (AWS API Gateway, Cloudflare)
        2. Implement in reverse proxy (Nginx rate limiting)
        3. Third-party service (Redis Cloud, etc.)
        
        Chosen approach: In-application middleware for better control and customization
    validations:
      required: false

  - type: textarea
    id: risks-concerns
    attributes:
      label: Risks & Concerns
      description: Potential issues or challenges
      placeholder: |
        - Performance impact on high-traffic endpoints
        - Redis dependency adds complexity
        - Distributed rate limiting across multiple servers
        - False positives for legitimate users behind NAT
        - Configuration complexity for different use cases
    validations:
      required: false

  - type: checkboxes
    id: backend-checklist
    attributes:
      label: Backend Checklist
      description: Please confirm
      options:
        - label: I have searched existing feature requests
          required: true
        - label: I have clearly defined the problem and solution
          required: true
        - label: I have provided detailed acceptance criteria
          required: true
        - label: I have considered database schema changes
          required: false
        - label: I have considered performance implications
          required: false
        - label: I have identified potential security concerns
          required: false
        - label: I have thought about backwards compatibility
          required: false